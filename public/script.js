// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
const socket = io();

// –°—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ DOM
const app = document.getElementById("app");
const playersContainer = document.getElementById("players-container");
const startButton = document.getElementById("start-game");
const joinButton = document.querySelector(".Game__button:nth-child(2)");
const sessionIdInput = document.getElementById("sessionField");
const showLobbyId = document.getElementById("session-id-display");
const logoutButton = document.getElementById('logout');

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏ —Å–µ—Å—Å–∏–∏
let playerName = null;
let currentSessionId = null;
let currentPlayers = []; // –°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤

let adminId = null; // ID —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

document.addEventListener('DOMContentLoaded', async () => {
    const token = localStorage.getItem('authToken');
    const userTextDiv = document.getElementById('text__user');
    const userNameLink = document.getElementById('user__name');
    const loginLink = document.getElementById('openLogin');
    const logoutLink = document.getElementById('text__logout');
    fetchUserCount()
    fetchLobbies()

    if (token) {
        try {
            const response = await fetch('/auth/verify', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });
            if (response.ok) {
                const data = await response.json();
                userNameLink.textContent = `${data.username}`;
                loginLink.style.display = 'none';
                logoutLink.style.display = 'block';
                userTextDiv.style.display = 'block';
            } else {
                console.error('Token verification failed');
                localStorage.removeItem('authToken');
                resetNavToDefault();
            }
        } catch (error) {
            console.error('Error verifying token:', error);
            resetNavToDefault();
        }
    } else {
        resetNavToDefault();
    }
});

logoutButton.addEventListener('click', () => {
    localStorage.removeItem('authToken');
    localStorage.removeItem('username');
    resetNavToDefault();
    location.reload()
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
function resetNavToDefault() {
    const loginLink = document.getElementById('openLogin');
    const logoutLink = document.getElementById('text__logout');
    const userTextDiv = document.getElementById('text__user');
    loginLink.style.display = 'block';
    logoutLink.style.display = 'none';
    userTextDiv.style.display = 'none';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞
function updateNavForLoggedInUser(username) {
    const userNameLink = document.getElementById('user__name');
    const loginLink = document.getElementById('openLogin');
    const logoutLink = document.getElementById('text__logout');
    const userTextDiv = document.getElementById('text__user');

    userNameLink.textContent = `${username}`;
    loginLink.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º Login
    logoutLink.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Logout
    userTextDiv.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
}

function showLoginForm() {
    document.getElementById('registration-form').style.display = 'none';
    document.getElementById('login-form').style.display = 'block';
}

function showRegistrationForm() {
    document.getElementById('login-form').style.display = 'none';
    document.getElementById('registration-form').style.display = 'block';
    loginInputs.forEach(input => {
        input.value = ""; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    });
}

const loginModal = document.getElementById('login-form');
const regModal = document.getElementById('registration-form');
const closeLoginButton = document.querySelector('.close');
const closeRegButton = document.querySelector('.reg__close');
const loginInputs = loginModal.querySelectorAll("input");
const regInputs = regModal.querySelectorAll("input");
// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫
closeLoginButton.addEventListener('click', function () {
    loginModal.style.display = 'none';
    document.body.classList.remove("no-scroll");
    loginInputs.forEach(input => {
        input.value = ""; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    });
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
closeRegButton.addEventListener('click', function () {
    regModal.style.display = 'none';
    document.body.classList.remove("no-scroll");
    regInputs.forEach(input => {
        input.value = ""; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    });
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –∑–∞ –∏—Ö –ø—Ä–µ–¥–µ–ª–∞–º–∏
window.addEventListener('click', function (event) {
    if (event.target === loginModal) {
        loginModal.style.display = 'none';
        document.body.classList.remove("no-scroll");
        loginInputs.forEach(input => {
            input.value = ""; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        });
    }
    if (event.target === regModal) {
        regModal.style.display = 'none';
        document.body.classList.remove("no-scroll");
        regInputs.forEach(input => {
            input.value = ""; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        });
    }
});

// –û—Ç—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
const registrationForm = document.getElementById('regForm');
const loginForm = document.getElementById('loginForm');
const messageBox = document.getElementById('messageBox');

//–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
registrationForm.addEventListener('submit', async (event) => {
    event.preventDefault();
    const username = document.getElementById('regUsername').value;
    const password = document.getElementById('regPassword').value;
    try {
        const response = await fetch('/auth/registration', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username, password }),
        });
        const data = await response.json();
        if (response.ok) {
            alert("–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!");
            regModal.style.display = 'none';
            location.reload();
        } else {
            messageBox.textContent = data.message || 'Registration failed';
        }
    } catch (error) {
        messageBox.textContent = 'An error occurred during registration';
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
loginForm.addEventListener('submit', async (event) => {
    event.preventDefault();
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;

    try {
        const response = await fetch('/auth/login', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username, password }),
        });
        const data = await response.json();
        if (response.ok) {
            alert('Login successful!');
            localStorage.setItem('authToken', data.token);
            localStorage.setItem('username', username);
            updateNavForLoggedInUser(username);
            loginModal.style.display = 'none';
        } else {
            alert(data.message || 'Login failed');
        }
    } catch (error) {
        alert('An error occurred during login');
    }
});

// –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
closeLoginButton.addEventListener('click', () => {
    loginInputs.forEach(input => input.value = '');
});
closeRegButton.addEventListener('click', () => {
    regInputs.forEach(input => input.value = '');
});

async function fetchUserCount() {
    try {
        const response = await fetch("/auth/user-count");
        const data = await response.json();
        document.getElementById("user-count").textContent = `${data.count} —á–µ–ª–æ–≤–µ–∫`;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:", error);
        document.getElementById("user-count").textContent = "–û—à–∏–±–∫–∞";
    }
}


// –°–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã
startButton.addEventListener("click", async () => {
    const token = localStorage.getItem("authToken");
    if (!token) {
        alert("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã");
        return;
    }

    try {
        const response = await fetch("/auth/verify", {
            method: "GET",
            headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" }
        });

        if (response.ok) {
            const data = await response.json();
            const lobbyName = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–±–±–∏: ");
            if (lobbyName.length === 0 || lobbyName.length > 60) {
                alert("–û—à–∏–±–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –¥–ª–∏–Ω–Ω–µ–µ 40 —Å–∏–º–≤–æ–ª–æ–≤")
                return;
            }
            localStorage.setItem("username", data.username);
            localStorage.setItem("lobbyName", lobbyName); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            console.log(lobbyName);
            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è ${data.username}`);
            socket.emit("createGame", { playerName: data.username, lobbyName });
        } else {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞");
            localStorage.removeItem("authToken");
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error);
    }
});



// –°–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–≥—Ä–µ
joinButton.addEventListener("click", async () => {
    const sessionId = sessionIdInput.value.trim();
    const token = localStorage.getItem("authToken");

    if (!sessionId) {
        alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–µ—Å—Å–∏–∏");
        return;
    }
    if (!token) {
        alert("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã");
        return;
    }

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è —Å–µ—Å—Å–∏—è
        const sessionCheckResponse = await fetch(`/auth/checkSession/${sessionId}`);
        const sessionCheckData = await sessionCheckResponse.json();

        if (!sessionCheckResponse.ok || !sessionCheckData.exists) {
            alert("–û—à–∏–±–∫–∞: —É–∫–∞–∑–∞–Ω–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
            return;
        }
        const response = await fetch("/auth/verify", {
            method: "GET",
            headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" }
        });

        if (response.ok) {
            const data = await response.json();
            localStorage.setItem("username", data.username);
            localStorage.setItem("sessionId", sessionId);
            localStorage.setItem("isAdmin","false");
            window.location.href = "lobby.html";
        } else {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞");
            localStorage.removeItem("authToken");
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error);
    }
});

// –°–ª—É—à–∞—Ç–µ–ª—å: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã
// –°–ª—É—à–∞—Ç–µ–ª—å: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã
socket.on("gameCreated", ({ sessionId }) => {
    localStorage.setItem("sessionId", sessionId);
    localStorage.setItem("isAdmin", "true"); // –°–æ–∑–¥–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
    localStorage.setItem("oldSocketId", socket.id); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π ID
    console.log(`üì• –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Å—Ç–∞—Ä—ã–π socket.id: ${socket.id}`);
    window.location.href = "lobby.html";
});

// –°–ª—É—à–∞—Ç–µ–ª—å: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ NEWNEW
// socket.on("updatePlayers", (players) => {
//     currentPlayers = players; // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
//     renderPlayers(players);   // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
// });

// –°–ª—É—à–∞—Ç–µ–ª—å: –æ—à–∏–±–∫–∞
socket.on("error", (message) => {
    alert(message);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
function renderPlayers(players) {
    console.log("Rendering players:", players); // –õ–æ–≥ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
    playersContainer.innerHTML = ""; // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º

    players.forEach((player) => {
        console.log("Processing player:", player); // –õ–æ–≥ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è

        const playerCard = document.createElement("div");
        playerCard.classList.add("card");
        playerCard.innerHTML = `
            <h2>${player.name}</h2>
            <p>ID: ${player.id || "N/A"}</p>
            ${player.isAdmin ? '<a>Admin</a>' : ''}
            ${
                adminId === socket.id && player.id !== socket.id
                    ? `<button class="button__lobby-kick" data-id="${player.id}">Kick</button>
                       <button class="button__lobby-admin" data-id="${player.id}">Admin</button>`
                    : ""
            }
        `;
        playersContainer.appendChild(playerCard);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll(".button__lobby-kick").forEach(button => {
        button.addEventListener("click", () => {
            const playerId = button.getAttribute("data-id");
            socket.emit("kickPlayer", playerId);
        });
    });

    document.querySelectorAll(".button__lobby-admin").forEach(button => {
        button.addEventListener("click", () => {
            const playerId = button.getAttribute("data-id");
            socket.emit("transferAdmin", playerId);
        });
    });
}

socket.on("kicked", () => {
    alert("You have been kicked from the session.");
    currentSessionId = null; // –°–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    currentPlayers = []; // –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
    showLobbyId.textContent = ""; // –°–±—Ä–æ—Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ID –ª–æ–±–±–∏
    playersContainer.innerHTML = ""; // –û—á–∏—Å—Ç–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
});


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
socket.on("updateAdmin", (newAdminId) => {
    adminId = newAdminId;
    renderPlayers(currentPlayers); // currentPlayers –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
});

async function fetchLobbies() {
    try {
        const response = await fetch('/getActiveLobbies');
        const lobbies = await response.json();
        renderLobbies(lobbies);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ª–æ–±–±–∏:", error);
    }
}

function renderLobbies(lobbies) {
    const lobbyListContainer = document.getElementById('lobby-list');
    lobbyListContainer.innerHTML = '';

    if (lobbies.length === 0) {
        lobbyListContainer.innerHTML = '<p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–±–±–∏</p>';
        return;
    }

    lobbies.forEach(lobby => {
        const lobbyCard = document.createElement('div');
        lobbyCard.classList.add('lobby-card');
        lobbyCard.innerHTML = `
            <p class="lobby-name"> ${lobby.lobbyName}</p>
            <p><strong>Session ID:</strong> ${lobby.sessionId}</p>
            <p><strong>–ò–≥—Ä–æ–∫–∏:</strong> ${lobby.playersCount} / ${lobby.maxPlayers}</p>
            <button class="join-lobby-button" data-session="${lobby.sessionId}">–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è</button>
        `;
        lobbyListContainer.appendChild(lobbyCard);
    });

    document.querySelectorAll('.join-lobby-button').forEach(button => {
        button.addEventListener('click', (event) => {
            const sessionId = event.target.getAttribute('data-session');
            joinGame(sessionId);
        });
    });
}
async function joinGame(sessionId) {
    const token = localStorage.getItem("authToken");

    if (!token) {
        alert("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã");
        return;
    }

    try {
        const response = await fetch("/auth/verify", {
            method: "GET",
            headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" }
        });

        if (response.ok) {
            const data = await response.json();
            localStorage.setItem("username", data.username);
            localStorage.setItem("sessionId", sessionId);
            localStorage.setItem("isAdmin", "false");
            window.location.href = "lobby.html";
        } else {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞");
            localStorage.removeItem("authToken");
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error);
    }
}
