const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const path = require('path');
const authRouter = require('./public/authRouter');
const mongoose = require("mongoose");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();
const server = http.createServer(app);
const io = new Server(server);

// –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π
const gameSessions = {}; // { sessionId: { players: { [socketId]: { name, isAdmin } } } }

// –ü–∞—Ä—Å–µ—Ä JSON
app.use(express.json());
app.use("/auth", authRouter);

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ public
app.use(express.static(path.join(__dirname, 'public')));

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ img
app.use('/img', express.static(path.join(__dirname, 'img')));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/lobby', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'lobby.html'));
});

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é "users" –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã
const User = mongoose.connection.collection("users");

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get("/auth/user-count", async (req, res) => {
    try {
        const count = await User.countDocuments(); // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        res.json({ count });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

app.get("/auth/checkSession/:sessionId", (req, res) => {
    const { sessionId } = req.params;
    if (gameSessions[sessionId]) {
        res.json({ exists: true });
    } else {
        res.json({ exists: false });
    }
});
// –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–±–±–∏
app.get('/getActiveLobbies', (req, res) => {
    const activeLobbies = Object.keys(gameSessions).map(sessionId => {
        const session = gameSessions[sessionId];
        return {
            lobbyName: session.lobbyName,
            sessionId: sessionId,
            playersCount: Object.keys(session.players).length,
            maxPlayers: 8 // –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º
        };
    });

    res.json(activeLobbies);
});


// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
function generateSessionId() {
    return `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–µ—Å—Å–∏–∏ –ø–æ ID —Å–æ–∫–µ—Ç–∞
function getSessionId(socket) {
    return Object.keys(gameSessions).find(sessionId => gameSessions[sessionId].players[socket.id]);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π WebSocket
io.on('connection', (socket) => {
    console.log('A user connected:', socket.id);

    //–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    socket.on('createGame', ({playerName, lobbyName}) => {
        const sessionId = generateSessionId();
        gameSessions[sessionId] = {
            players: {
                [socket.id]: { id: socket.id, name: playerName, isAdmin: true }
            },
            lobbyName: lobbyName, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–±–±–∏
            state: 'waiting',
        };
        socket.join(sessionId);
        socket.emit('gameCreated', { sessionId, lobbyName });
        console.log(`üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–µ—Å—Å–∏—é ${sessionId}:`, Object.values(gameSessions[sessionId].players));
        io.to(sessionId).emit('updateLobbyName', lobbyName); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å–µ–º
        io.to(sessionId).emit('updatePlayers', Object.values(gameSessions[sessionId].players));
        io.to(sessionId).emit('updateAdmin', socket.id);
        console.log(`${playerName} created game: ${sessionId}`);
    });



    socket.on("reconnectPlayer", ({ sessionId, playerName, oldSocketId }) => {
        if (!gameSessions[sessionId]) {
            console.log(`‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è ${sessionId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`);
            socket.emit("error", "Session no longer exists.");
            return;
        }

        const session = gameSessions[sessionId];
        session.awaitingReconnect = false; // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏

        if (session.disconnectedPlayers && session.disconnectedPlayers[playerName]) {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Å–µ—Å—Å–∏–∏
            session.players[socket.id] = {
                id: socket.id,
                name: session.disconnectedPlayers[playerName].name,
                isAdmin: session.disconnectedPlayers[playerName].isAdmin
            };

            delete session.disconnectedPlayers[playerName]; // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã—Ö

            console.log(`üîÑ –ò–≥—Ä–æ–∫ ${playerName} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª—Å—è —Å –Ω–æ–≤—ã–º ID: ${socket.id}`);

            socket.join(sessionId);
            io.to(sessionId).emit("updatePlayers", Object.values(session.players));
            io.to(sessionId).emit("updateAdmin", session.players[socket.id].isAdmin ? socket.id : null);
        } else {
            console.log(`‚ö†Ô∏è –ò–≥—Ä–æ–∫ ${playerName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π.`);
            socket.emit("error", "–í—ã –Ω–µ –±—ã–ª–∏ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏.");
        }
    });


    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    socket.on('joinGame', ({ sessionId, playerName }) => {
        if (!gameSessions[sessionId]) {
            socket.emit('error', 'Session does not exist');
            return;
        }

        const session = gameSessions[sessionId];
        if (session.players[socket.id]) {
            socket.emit('error', 'You are already in this session');
            return;
        }

        session.players[socket.id] = { id: socket.id, name: playerName, isAdmin: false };
        socket.join(sessionId);
        console.log(`üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–µ—Å—Å–∏—é ${sessionId}:`, Object.values(gameSessions[sessionId].players));

        socket.emit('updateLobbyName', session.lobbyName); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–±–±–∏ –Ω–æ–≤–æ–º—É –∏–≥—Ä–æ–∫—É
        io.to(sessionId).emit('updatePlayers', Object.values(gameSessions[sessionId].players));
        console.log(`${playerName} joined game: ${sessionId}`);
    });

    // –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    socket.on('kickPlayer', (playerId) => {
        const sessionId = getSessionId(socket);
        if (!sessionId) return;

        const session = gameSessions[sessionId];
        if (!session.players[socket.id]?.isAdmin) {
            socket.emit('error', 'Only the admin can kick players.');
            return;
        }

        if (session.players[playerId]) {
            delete session.players[playerId];
            io.to(playerId).emit('kicked'); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–∫–ª—é—á—ë–Ω–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
            io.sockets.sockets.get(playerId)?.leave(sessionId); // –ò—Å–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
            console.log(`üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–µ—Å—Å–∏—é ${sessionId}:`, Object.values(gameSessions[sessionId].players));
            io.to(sessionId).emit('updatePlayers', Object.values(gameSessions[sessionId].players)); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        }
    });

    // –ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    socket.on('transferAdmin', (newAdminId) => {
        const sessionId = getSessionId(socket);
        if (!sessionId) return;

        const session = gameSessions[sessionId];
        if (!session.players[socket.id]?.isAdmin) {
            socket.emit('error', 'Only the admin can transfer admin rights.');
            return;
        }

        if (session.players[newAdminId]) {
            Object.values(session.players).forEach(player => player.isAdmin = false);
            session.players[newAdminId].isAdmin = true;
            io.to(sessionId).emit('updateAdmin', newAdminId); // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            console.log(`üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–µ—Å—Å–∏—é ${sessionId}:`, Object.values(gameSessions[sessionId].players));
            io.to(sessionId).emit('updatePlayers', Object.values(gameSessions[sessionId].players));
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
    socket.on('disconnect', () => {
        const sessionId = getSessionId(socket);
        if (!sessionId) return;

        const session = gameSessions[sessionId];
        if (!session || !session.players[socket.id]) return;

        const wasAdmin = session.players[socket.id].isAdmin;
        const playerName = session.players[socket.id].name;

        // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∏–º—è
        delete session.players[socket.id];

        // –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–∫–ª—é—á–∏–ª—Å—è, –Ω–æ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏, –ø–µ—Ä–µ–¥–∞—ë–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –¥—Ä—É–≥–æ–º—É
        // if (wasAdmin && Object.keys(session.players).length > 0) { NEWNEW
        //     const newAdminId = Object.keys(session.players)[0];
        //     session.players[newAdminId].isAdmin = true;
        //     io.to(sessionId).emit('updateAdmin', newAdminId);
        //     console.log(`üëë –ù–æ–≤—ã–π –∞–¥–º–∏–Ω: ${newAdminId}`);
        // }
        if (wasAdmin && Object.keys(session.players).length > 0) {
            const newAdminId = Object.keys(session.players)[0];
            if (session.players[newAdminId]) {
                session.players[newAdminId].isAdmin = true;
                io.to(sessionId).emit('updateAdmin', newAdminId);
                console.log(`üëë –ù–æ–≤—ã–π –∞–¥–º–∏–Ω: ${newAdminId}`);
            }
        }


        // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ
        if (wasAdmin) {
            session.lastAdmin = playerName;
        }

        session.disconnectedPlayers = session.disconnectedPlayers || {};
        session.disconnectedPlayers[playerName] = {
            id: socket.id,
            name: playerName,
            isAdmin: wasAdmin
        };

        console.log(`üîÑ –ò–≥—Ä–æ–∫ ${playerName} –æ—Ç–∫–ª—é—á–∏–ª—Å—è, —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞.`);

        io.to(sessionId).emit('updatePlayers', Object.values(session.players));

        // –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–±–±–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è
        if (Object.keys(session.players).length === 0) {
            setTimeout(() => {
                if (Object.keys(gameSessions[sessionId]?.players || {}).length === 0) {
                    delete gameSessions[sessionId];
                    console.log(`‚ùå –°–µ—Å—Å–∏—è ${sessionId} —É–¥–∞–ª–µ–Ω–∞, –Ω–∏–∫—Ç–æ –Ω–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª—Å—è.`);
                }
            }, 10000);
        }

        console.log('A user disconnected:', socket.id);
    });




    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    socket.on('kicked', () => {
        socket.emit('error', 'You have been kicked from the session.');
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = 3000;
server.listen(PORT, async () => {
    try {
        await mongoose.connect('mongodb+srv://santi:3Y9NMxs8ERrWB1g0@cluster0.oqajc.mongodb.net/'); // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        console.log(`Server is running on http://192.168.52.103:${PORT}`);
    } catch (err) {
        console.error("Failed to start server due to database connection error.");
        process.exit(1); // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    }
});